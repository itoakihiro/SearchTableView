{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red92\green38\blue153;
\red63\green110\blue116;\red46\green13\blue110;\red196\green26\blue22;\red38\green71\blue75;\red28\green0\blue207;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //\
//  ViewController.swift\
//  SearchTableView\
//\
//  Created by HIRANO TOMOKAZU on 3/2/16.\
//  Copyright \'a9 2016 Akihiro Ito. All rights reserved.\
//\
\cf0 \
\cf3 import\cf0  UIKit\
\
\cf3 class\cf0  ViewController: \cf4 UIViewController\cf0 , \cf4 UITableViewDataSource\cf0 , \cf4 UITableViewDelegate\cf0 , \cf4 UISearchBarDelegate\cf0  \{\
    \
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  searchBar: \cf4 UISearchBar\cf0 !\
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  tableView: \cf4 UITableView\cf0 !\
    \
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  VXWL_pre: \cf4 UILabel\cf0 !\
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  VXWL: \cf4 UILabel\cf0 !\
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  User_pre: \cf4 UILabel\cf0 !\
    \cf3 @IBOutlet\cf0  \cf3 weak\cf0  \cf3 var\cf0  User: \cf4 UILabel\cf0 !\
    \
    \cf3 var\cf0  items = \cf4 NSMutableArray\cf0 ()\
    \
    \cf3 var\cf0  searchActive :  \cf4 Bool\cf0  = \cf3 false\cf0 \
    \cf3 var\cf0  tabButton :     \cf4 Bool\cf0  = \cf3 false\cf0 \
    \
    \cf3 var\cf0  picUrl:         [\cf4 String\cf0 ] = []\
    \cf3 var\cf0  name:           [\cf4 String\cf0 ] = []\
    \cf3 var\cf0  desc:           [\cf4 String\cf0 ] = []\
    \
    \cf3 var\cf0  datas: [\cf5 JSON\cf0 ] = []\
    \cf3 @IBOutlet\cf0  \cf3 var\cf0  webView: \cf4 UIWebView\cf0 !\
    \
    \cf3 override\cf0  \cf3 func\cf0  viewDidLoad() \{\
        \cf3 super\cf0 .\cf6 viewDidLoad\cf0 ()\
        \
        \cf2 /* Setup delegates */\cf0 \
        \cf5 tableView\cf0 .\cf4 delegate\cf0  = \cf3 self\cf0 \
        \cf5 tableView\cf0 .\cf4 dataSource\cf0  = \cf3 self\cf0 \
        \cf5 searchBar\cf0 .\cf4 delegate\cf0  = \cf3 self\cf0 \
        \
        \cf5 VXWL\cf0 .\cf4 text\cf0  = \cf7 "VXWL(0)"\cf0 \
        \cf5 User\cf0 .\cf4 text\cf0  = \cf7 "User(0)"\cf0 \
        \
        \cf3 for\cf0  subView \cf3 in\cf0  \cf3 self\cf0 .\cf5 searchBar\cf0 .\cf4 subviews\cf0 \
        \{\
            \cf3 for\cf0  subsubView \cf3 in\cf0  subView.\cf4 subviews\cf0 \
            \{\
                \cf3 if\cf0  \cf3 let\cf0  textField = subsubView \cf3 as\cf0 ? \cf4 UITextField\cf0 \
                \{\
                    textField.\cf4 attributedPlaceholder\cf0  = \cf4 NSAttributedString\cf0 (string: \cf6 NSLocalizedString\cf0 (\cf7 "Search"\cf0 , comment: \cf7 ""\cf0 ), attributes: [\cf4 NSForegroundColorAttributeName\cf0 : \cf4 UIColor\cf0 .\cf6 whiteColor\cf0 ()])\
                \}\
            \}\
        \}\
    \}\
\
    \cf3 func\cf0  searchBar(searchBar: \cf4 UISearchBar\cf0 , textDidChange searchText: \cf4 String\cf0 ) \{\
        \
        \cf5 picUrl\cf0  = []\
        \cf5 name\cf0  = []\
        \cf5 desc\cf0  = []\
        \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), \{\
            \cf3 self\cf0 .\cf5 tableView\cf0 .\cf6 reloadData\cf0 ()\
        \})\
\
        \cf8 addDummyData\cf0 ( searchBar.\cf4 text\cf0 ! )\
    \}\
\
    \cf3 override\cf0  \cf3 func\cf0  didReceiveMemoryWarning() \{\
        \cf3 super\cf0 .\cf6 didReceiveMemoryWarning\cf0 ()\
        \cf2 // Dispose of any resources that can be recreated.\
\cf0     \}\
\
    \cf3 func\cf0  numberOfSectionsInTableView(tableView: \cf4 UITableView\cf0 ) -> \cf4 Int\cf0  \{\
        \cf3 return\cf0  \cf9 1\cf0 \
    \}\
    \
    \cf3 func\cf0  tableView(tableView: \cf4 UITableView\cf0 , numberOfRowsInSection section: \cf4 Int\cf0 ) -> \cf4 Int\cf0  \{\
        \cf3 return\cf0  \cf5 picUrl\cf0 .\cf4 count\cf0 ;\
    \}\
    \
    \cf3 func\cf0  tableView(tableView: \cf4 UITableView\cf0 , cellForRowAtIndexPath indexPath: \cf4 NSIndexPath\cf0 ) -> \cf4 UITableViewCell\cf0  \{\
        \cf3 let\cf0  cell = tableView.\cf6 dequeueReusableCellWithIdentifier\cf0 (\cf7 "Cell"\cf0 , forIndexPath: indexPath) \cf3 as\cf0 ! \cf5 TableViewCell\cf0 \
        \
        \cf2 //cell.layer.masksToBounds = true\
\cf0         \cf2 //cell.layer.cornerRadius = 5\
\cf0         \
        \cf3 if\cf0  \cf5 picUrl\cf0 [indexPath.\cf4 row\cf0 ] != \cf7 ""\cf0  \{\
            \cf3 let\cf0  url = \cf4 NSURL\cf0 (string: \cf5 picUrl\cf0 [indexPath.\cf4 row\cf0 ])\
            \cf3 let\cf0  data = \cf4 NSData\cf0 (contentsOfURL: url!)\
            cell.\cf5 imageUrl\cf0 .\cf4 image\cf0  = \cf4 UIImage\cf0 (data: data!)\
        \}\
        \cf3 if\cf0  \cf5 name\cf0 [indexPath.\cf4 row\cf0 ] != \cf7 ""\cf0  \{\
            cell.\cf5 nameLabel\cf0 .\cf4 text\cf0  = \cf5 name\cf0 [indexPath.\cf4 row\cf0 ]\
        \}\
        \cf3 if\cf0  \cf5 desc\cf0 [indexPath.\cf4 row\cf0 ] != \cf7 ""\cf0  \{\
            cell.\cf5 descLabel\cf0 .\cf4 text\cf0  = \cf5 desc\cf0 [indexPath.\cf4 row\cf0 ]\
        \}\
        \cf3 return\cf0  cell;\
    \}\
    \
    \cf3 @IBAction\cf0  \cf3 func\cf0  VXWL_clk(sender: \cf4 UIButton\cf0 ) \{\
   \
        \cf5 searchBar\cf0 .\cf4 text\cf0  = \cf7 ""\cf0 \
        \cf5 tabButton\cf0  = \cf3 false\cf0 \
        \cf5 VXWL\cf0 .\cf4 textColor\cf0  = \cf4 UIColor\cf0 (red: \cf9 58.0\cf0 /\cf9 255.0\cf0 , green: \cf9 108.0\cf0 /\cf9 255.0\cf0 , blue: \cf9 219.0\cf0 /\cf9 255.0\cf0 , alpha: \cf9 1.0\cf0 )\
        \cf5 User\cf0 .\cf4 textColor\cf0  = \cf4 UIColor\cf0 .\cf6 blackColor\cf0 ()\
        \cf5 VXWL_pre\cf0 .\cf4 hidden\cf0  = \cf3 true\cf0 \
        \cf5 User_pre\cf0 .\cf4 hidden\cf0  = \cf3 false\cf0 \
        \cf5 picUrl\cf0  = []\
        \cf5 name\cf0  = []\
        \cf5 desc\cf0  = []\
        \cf5 VXWL\cf0 .\cf4 text\cf0  = \cf7 "VXWL(0)"\cf0 \
        \
        \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), \{\
            \cf3 self\cf0 .\cf5 tableView\cf0 .\cf6 reloadData\cf0 ()\
        \})\
    \}\
    \
    \cf3 @IBAction\cf0  \cf3 func\cf0  User_clk(sender: \cf4 UIButton\cf0 ) \{\
    \
        \cf5 searchBar\cf0 .\cf4 text\cf0  = \cf7 ""\cf0 \
        \cf5 tabButton\cf0  = \cf3 true\cf0 \
        \cf5 VXWL\cf0 .\cf4 textColor\cf0  = \cf4 UIColor\cf0 .\cf6 blackColor\cf0 ()\
        \cf5 User\cf0 .\cf4 textColor\cf0  = \cf4 UIColor\cf0 (red: \cf9 58.0\cf0 /\cf9 255.0\cf0 , green: \cf9 108.0\cf0 /\cf9 255.0\cf0 , blue: \cf9 219.0\cf0 /\cf9 255.0\cf0 , alpha: \cf9 1.0\cf0 )\
        \cf5 VXWL_pre\cf0 .\cf4 hidden\cf0  = \cf3 false\cf0 \
        \cf5 User_pre\cf0 .\cf4 hidden\cf0  = \cf3 true\cf0 \
        \cf5 picUrl\cf0  = []\
        \cf5 name\cf0  = []\
        \cf5 desc\cf0  = []\
        \cf5 User\cf0 .\cf4 text\cf0  = \cf7 "User(0)"\cf0 \
        \
        \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), \{\
            \cf3 self\cf0 .\cf5 tableView\cf0 .\cf6 reloadData\cf0 ()\
        \})\
        \
    \}\
    \
    \cf2 // json parse\
\cf0     \cf3 func\cf0  addDummyData(param: \cf4 String\cf0 ) \{\
        \
        \cf2 //request with keyword\
\cf0          \cf5 APIProxy\cf0 .sharedInstance.\cf8 getData\cf0 (param, onCompletion: \{ json -> \cf4 Void\cf0  \cf3 in\cf0 \
            \
            \cf3 var\cf0  searched_data:\cf5 JSON\cf0 \
            \cf3 var\cf0  count:\cf4 Int\cf0  = \cf9 0\cf0 \
            \cf2 //start if\
\cf0             \cf3 if\cf0  !\cf3 self\cf0 .\cf5 tabButton\cf0  \{\
                searched_data = json\cf8 [\cf7 "data"\cf8 ][\cf7 "voxwells"\cf8 ]\cf0 \
                \cf3 if\cf0  searched_data \cf8 ==\cf0  \cf3 nil\cf0  \{\
                    \cf3 return\cf0 \
                \}\
                \cf3 for\cf0  index \cf3 in\cf0  \cf9 0\cf0 ..<searched_data.\cf5 count\cf0  \{\
                    \cf3 if\cf0  \cf3 let\cf0  _picUrl = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "pict150"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 picUrl\cf0 .\cf6 append\cf0 (_picUrl)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 picUrl\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                    \
                    \cf3 if\cf0  \cf3 let\cf0  _name = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "name"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 name\cf0 .\cf6 append\cf0 (_name)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 name\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                    \
                    \cf3 if\cf0  \cf3 let\cf0  _desc = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "street"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 desc\cf0 .\cf6 append\cf0 (_desc)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 desc\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                \}\
                count = searched_data.\cf5 count\cf0 \
                \cf3 self\cf0 .\cf5 VXWL\cf0 .\cf4 text\cf0  = \cf7 "VXWL("\cf0  + \cf4 String\cf0 (count) + \cf7 ")"\cf0 \
                \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), \{\
                    \cf3 self\cf0 .\cf5 tableView\cf0 .\cf6 reloadData\cf0 ()\
                \})\
            \}\
            \cf3 else\cf0  \{\
                searched_data = json\cf8 [\cf7 "data"\cf8 ][\cf7 "users"\cf8 ]\cf0 \
                \cf3 if\cf0  searched_data \cf8 ==\cf0  \cf3 nil\cf0  \{\
                    \cf3 return\cf0 \
                \}\
                \cf3 for\cf0  index \cf3 in\cf0  \cf9 0\cf0 ..<searched_data.\cf5 count\cf0  \{\
                    \cf3 if\cf0  \cf3 let\cf0  _picture_small = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "picture_small"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 picUrl\cf0 .\cf6 append\cf0 (_picture_small)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 picUrl\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                    \
                    \cf3 if\cf0  \cf3 let\cf0  _first_name = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "first_name"\cf8 ]\cf0 .\cf5 string\cf0  , \cf3 let\cf0  _last_name = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "last_name"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 name\cf0 .\cf6 append\cf0 (_first_name + \cf7 " "\cf0  + _last_name)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 name\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                    \
                    \cf3 if\cf0  \cf3 let\cf0  _gender = searched_data\cf8 [\cf0 index\cf8 ][\cf7 "gender"\cf8 ]\cf0 .\cf5 string\cf0  \{\
                        \cf3 self\cf0 .\cf5 desc\cf0 .\cf6 append\cf0 (_gender)\
                    \} \cf3 else\cf0  \{\
                        \cf3 self\cf0 .\cf5 desc\cf0 .\cf6 append\cf0 (\cf7 ""\cf0 )\
                    \}\
                \}\
                count = searched_data.\cf5 count\cf0 \
                \cf3 self\cf0 .\cf5 User\cf0 .\cf4 text\cf0  = \cf7 "User("\cf0  + \cf4 String\cf0 (count) + \cf7 ")"\cf0 \
                \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), \{                    \cf3 self\cf0 .\cf5 tableView\cf0 .\cf6 reloadData\cf0 ()\
                \})\
            \}\
            \cf2 //end if\
\cf0         \})\
        \cf2 //end request.\
\cf0     \}\
    \cf2 //end json parse\
\cf0 \}\
\
}